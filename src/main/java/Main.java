import java.util.Scanner;


public class Main {

	private static Scanner sc = new Scanner(System.in);
	private static String[] menu = new String[] { "1.Eliminació d'un client",
			"2.Actualització de les dades d'un client", "3.Cerca un client pel seu nom", "4.Donar d'alta un nou soci",
			"5.Crear una nova comanda", "6.Mostrar les comandes d'un client",
			"7.Mostrar la quantitat total facturada de cada client ordenada de major a menor", "0.Exit" };

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// hide all console output messages generated by Hibernate
		//Logger.getLogger("org.hibernate").setLevel(Level.OFF);
		// hide the most console output messages generated by Hibernate
		// Logger.getLogger("org.hibernate").setLevel(Level.SEVERE);

		String chosenOption = "";
		String vailableOptions = "";
		do {
			System.out.println("\n\tMENU");
			for (int i = 0; i < menu.length; i++) {
				System.out.println(menu[i]);
				vailableOptions += String.valueOf(i) + "|";
			}
			;
			System.out.print("opció: ");
			chosenOption = sc.next();
			if (chosenOption.matches(vailableOptions)) {
				switch (Integer.parseInt(chosenOption)) {
				case 1:				
					
					ClientsDB clientDB1 = new ClientsDB();
					clientDB1.removeAClient();

					System.out.println("");
					break;

				case 2:

					ClientsDB clientDB2 = new ClientsDB();
					clientDB2.updateAClient();					
					
					System.out.println("");
					break;

				case 3:

					ClientsDB clientDB3 = new ClientsDB();
					clientDB3.updateAClient();	

					System.out.println("");
					break;

				case 4:

					ClientsDB clientDB4 = new ClientsDB();
					clientDB4.createNewClient();	

					System.out.println("");
					break;

				case 5:

					ComandesDB comandaDB5 = new ComandesDB();
					comandaDB5.createNewComanda();
					System.out.println("");					
					break;

				case 6:

					ClientsDB clientDB6 = new ClientsDB();
					clientDB6.showAClientComandes();

					System.out.println("");
					break;

				case 7:

					// SQL sentence
					/* select round(sum(preu_total),2) as total_facturat,dni_client from comandes
					* group by dni_client order by total_facturat desc;
					*/

					ClientsDB clientsDB7 = new ClientsDB();
					clientsDB7.showAllFacturedByClient();

					System.out.println("");
					break;

				default:
					System.out.println("Wrong value: " + chosenOption);
				}
			}

		} while (!chosenOption.matches("0"));
		
		System.out.println("Closing...");
	}
}
